import{isIndexLastInArray as t,isIndexFirstInArray as e}from"../../../shared/utils/index.min.js";import{_FRAGMENT as i}from"../../../shared/constants.min.js";import s from"../../../shared/utils/sort-nested-indexes.min.js";class h{constructor(){this[Symbol.iterator]=()=>this.toEntriesArray()[Symbol.iterator](),this.indexes=[],this.children={},this.fragmentIndexes=[],this.fragmentChildren={},this.has=t=>!!this.children[t],this.get=t=>this.children[t],this.hasFragment=t=>!!this.fragmentChildren[t],this.getFragment=t=>this.fragmentChildren[t],this.setFnFactory=(t,e=!1)=>(i,s)=>{try{const h="add"===t,n=e?!!this.fragmentChildren[i]:!!this.children[i];return!!(h?!n:n)&&(e?(h&&(this.fragmentIndexes=this.fragmentIndexes.concat(i)),this.fragmentChildren[i]=s):(h&&(this.indexes=this.indexes.concat(i)),this.children[i]=s),!0)}catch(t){return!1}},this.add=this.setFnFactory("add"),this.replace=this.setFnFactory("replace"),this.addFragment=this.setFnFactory("add",!0),this.replaceFragment=this.setFnFactory("replace",!0),this.createEmptyFragment=t=>this.addFragment(t,{index:t,element:i,fragmentChildIndexes:[],fragmentChildKeys:{},fragmentChildrenLength:0}),this.remove=t=>this.has(t)&&this.delete(t),this.removeFragment=t=>this.hasFragment(t)&&this.delete(t,!0),this.size=()=>this.indexes.length,this.empty=()=>0===this.indexes.length,this.getAll=()=>this.indexes.map(t=>this.children[t]),this.getKeys=()=>this.indexes,this.removeAll=()=>(this.indexes=[],this.children={},!0),this.toEntriesArray=()=>this.indexes.map(this.mapToEntry),this.getFirstIndex=()=>this.indexes[0],this.getFirstChild=()=>this.children[this.indexes[0]],this.hasOneChild=()=>1===this.indexes.length,this.delete=(t,e=!1)=>{try{return e?(this.fragmentIndexes=this.fragmentIndexes.filter(e=>e!==t),delete this.fragmentChildren[t]):(this.indexes=this.indexes.filter(e=>e!==t),delete this.children[t]),!0}catch(t){return!1}},this.mapToEntry=t=>[t,this.children[t]],this.getChildOrNull=(t,e)=>t?this.children[e()]:null,this.getPositionInfoForNewChild=i=>{const s=h.sortIndexes(this.indexes.concat(i)),n=s.indexOf(i),r=e(n),d=t(n,s),l=this.getChildOrNull(!r,()=>s[0]),a=this.getChildOrNull(!r,()=>s[n-1]),m=this.getChildOrNull(!d,()=>s[n+1]);return{indexInArray:n,allSortedIndexes:s,isFirst:r,isLast:d,previousSibling:a,nextSibling:m,firstChild:l}}}get[Symbol.toStringTag](){return JSON.stringify(this.indexes)}}h.sortIndexes=t=>s(t);const n=t=>h.sortIndexes(t.fragmentChildIndexes);export default()=>new h;export{n as getSortedFragmentChildIndexes};
