import"rxjs";import{renderTypeSwitch as r}from"../utils/check-type.min.js";import"rxjs/operators";import{unsubscribe as m}from"../utils/observable.min.js";import{childrenArrayToFragment as t}from"../utils/fragment.min.js";import{removeChildFromIndexPosition as e}from"../dom-renderer.min.js";import{renderRvdFragment as o}from"../fragment.min.js";const i=(t,i,n,p,s)=>a=>{r(((r,t,i,n,p,s)=>()=>{e(e=>(m(e),n.remove(e.index),n.createEmptyFragment(t),o(t,i,n,p,s)(r)),t,i,n)})(a,t,i,n,p,s),((r,m,t,e,i,n)=>()=>o(m,t,e,i,n)(r))(a,t,i,n,p,s),((r,m,t,e,i,n)=>()=>(e.createEmptyFragment(m),o(m,t,e,i,n)(r)))(a,t,i,n,p,s))(t,n)},n=(r,m,t,e,i)=>n=>(t.createEmptyFragment(r),o(r,m,t,e,i)(n)),p=(...r)=>m=>i(...r)(t(m)),s=(...r)=>m=>n(...r)(t(m));export{p as arrayRenderCallback,i as fragmentRenderCallback,s as staticArrayRenderCallback,n as staticFragmentRenderCallback};
