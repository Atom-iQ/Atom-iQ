import"rxjs";import{renderTypeSwitch as e}from"../utils/check-type.min.js";import"rxjs/operators";import{unsubscribe as i}from"../utils/observable.min.js";import{renderChildInIndexPosition as r,removeChildFromIndexPosition as t}from"../dom-renderer.min.js";import{removeExistingFragment as o}from"./utils.min.js";const s=(e,i,t,o,s,m,n)=>()=>{const l=s.split(".").length;i.fragmentChildren.forEach(e=>{const i=e.index.split(".").slice(l).join("."),t=`${s}.${i}`;r(i=>{n.add(t,{...i,key:e.key,subscription:e.subscription}),n.has(e.index)&&n.remove(e.index)},e.element,t,m,n)}),o.fragmentChildKeys={...o.fragmentChildKeys,[e.key]:s},delete t[e.key]},m=(r,m,n,l,p,d,c)=>e(()=>{t(e=>{c.remove(e.index),e.key&&n[e.key]||i(e)},p,d,c),s(r,m,n,l,p,d,c)()},e=>{o(n,p,d,c)(e),s(r,m,n,l,p,d,c)()},s(r,m,n,l,p,d,c))(p,c);export{m as nestedFragmentMoveCallback};
