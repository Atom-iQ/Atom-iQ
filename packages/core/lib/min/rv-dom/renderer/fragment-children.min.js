import{isObservable as e}from"rxjs";import{_FRAGMENT as t}from"../../shared/constants.min.js";import{isRvdElement as n}from"./utils/check-type.min.js";import"rxjs/operators";import{unsubscribe as r}from"./utils/observable.min.js";import{getFlattenFragmentChildren as l}from"./utils/fragment.min.js";import{nestedFragmentMoveCallback as m}from"./move-callback/fragment.min.js";import{elementMoveCallback as i}from"./move-callback/element.min.js";const o=(t,r,l,m)=>(i,o)=>{const s=`${t}.${o}`;if(e(i)){const e=i.subscribe(e=>{n(e)&&e.key?l(e,s):m(e,s)});r.add(e)}else n(i)&&i.key?l(i,s):m(i,s)},s=(e,t,n,r)=>{t.fragmentChildKeys={...t.fragmentChildKeys,[r]:n},delete e[r],console.log("Skip rendering element with key: ",r)},d=(e,t)=>((e=>e.oldKeyElementMap&&Object.keys(e.oldKeyElementMap).length>0)(t)&&Object.values(t.oldKeyElementMap).forEach(e=>{e.fragmentChildren&&e.fragmentChildren.forEach(e=>r(e)),r(e.child)}),t.oldKeyElementMap=Object.keys(t.fragmentChildKeys).reduce((n,r)=>{const m=t.fragmentChildKeys[r],i=e.get(m)||e.getFragment(m),o=i.fragmentChildIndexes&&i.fragmentChildIndexes.reduce(l(e),[]);return n[r]={index:m,child:i,fragmentChildren:o},n},{}),t.oldKeyElementMap),a=(e,n,r,l,o)=>(d,a)=>{const c=e[d.key];if(c){if(c.index===a)return s(e,n,a,d.key);c.child.element===t?m(d,c,e,n,a,r,l):i(d,c,e,n,a,r,l),console.log("Move child with key: ",d.key)}else n.fragmentChildKeys={...n.fragmentChildKeys,[d.key]:a},console.log("Render child with key: ",d.key),o(d,a)};export{d as loadPreviousKeyedElements,o as renderFragmentChild,a as skipMoveOrRenderKeyedChild,s as skipRenderingKeyedChild};
